---
import MainGridLayout from '../layouts/MainGridLayout.astro';
import { i18n } from '../i18n/translation';
import I18nKey from '../i18n/i18nKey';
import booksData from '../../public/data/books.json';
import OptimizedBookCover from '../components/OptimizedBookCover.astro';
import { Icon } from 'astro-icon/components';

// 类型定义
interface BookRecord {
  fields: {
    [key: string]: any;
    书名: string;
    作者?: string[];
    书籍简介?: string;
    书评?: string;
    封面?: { local_path: string }[];
    推荐状态?: string;
    阅读进度?: string;
    完成阅读时期?: string;
    领域?: string;
  };
  id: string;
  record_id: string;
}

// Filter books with reading progress "1"
const books = (booksData.data.items as BookRecord[]).filter((book) => book.fields['阅读进度'] === "1");

// Group books by category (领域)
const booksByCategory = books.reduce((acc: Record<string, BookRecord[]>, book: BookRecord) => {
  const category = book.fields['领域'] || '未分类';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(book);
  return acc;
}, {});

// Function to get cover URL
function getCoverUrl(book: BookRecord): string | null {
  if (book.fields['封面']?.[0]) {
    // 使用本地路径
    return book.fields['封面'][0].local_path;
  }
  return null;
}

// 添加一个常量用于图片加载失败的样式
const FALLBACK_STYLES = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: '100%',
  width: '100%',
  padding: '1rem',
  backgroundColor: 'var(--bg-2)',
  color: 'var(--text-2)',
  textAlign: 'center',
  fontSize: '0.875rem'
};
---

<MainGridLayout title={i18n(I18nKey.bookshelf)} description={i18n(I18nKey.bookshelf)}>
  <style>
    .custom-scrollbar::-webkit-scrollbar {
      width: 4px;
    }
    .custom-scrollbar::-webkit-scrollbar-track {
      background: transparent;
    }
    .custom-scrollbar::-webkit-scrollbar-thumb {
      background-color: rgba(255, 255, 255, 0.3);
      border-radius: 2px;
    }
    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
      background-color: rgba(255, 255, 255, 0.5);
    }
  </style>
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative">
    <div class="card-base z-10 px-6 py-6 relative w-full">
      {Object.entries(booksByCategory).map(([category, books]) => (
        <div class="category-card is-auto-collapsed mb-8 rounded-lg border border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-950/50 shadow-sm transition-all duration-300 hover:border-[var(--primary)] hover:shadow-lg overflow-hidden">
          <div class="category-header p-5 flex items-center justify-between cursor-pointer select-none">
            <div class="flex items-center gap-3">
              <Icon name="mdi:bookshelf" class="text-xl text-[var(--primary)]" />
              <h2 class="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                {category}
              </h2>
            </div>
            <div class="flex items-center gap-3">
              <span class="text-sm text-neutral-500 dark:text-neutral-400">
                {books.length} 本书
              </span>
              <Icon name="mdi:chevron-down" class="chevron-icon text-lg transform transition-transform duration-300" />
            </div>
          </div>
          <div class="category-content overflow-hidden transition-all duration-500 ease-in-out">
            <div class="px-5 pb-5">
              <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                {books.map((book: BookRecord) => (
                  <div class="group relative flex flex-col bg-white/80 dark:bg-zinc-900 rounded-xl shadow hover:shadow-xl transition-shadow duration-300 border border-zinc-100 dark:border-zinc-800 min-h-[340px]">
                <div class="aspect-[3/4] overflow-hidden rounded-t-xl bg-zinc-100 dark:bg-zinc-900">
                  {getCoverUrl(book) ? (
                    <>
                      <OptimizedBookCover
                        src={getCoverUrl(book)}
                        alt={book.fields['书名']} 
                        class="h-full w-full"
                        width={400}
                        height={600}
                        format="webp"
                        quality={80}
                        loading="lazy"
                      />
                    </>
                  ) : (
                    <div class="flex h-full w-full items-center justify-center p-4 book-cover-fallback">
                      <div class="text-center w-full">
                        <div class="font-bold text-base mb-2 line-clamp-3">{book.fields['书名'] || ''}</div>
                        {book.fields['作者'] && book.fields['作者'].length > 0 && (
                          <div class="text-xs opacity-80 mt-2">{book.fields['作者'].join(', ')}</div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
                <div class="flex-1 flex flex-col p-3 pb-2">
                  <h3 class="text-base font-semibold text-zinc-900 dark:text-white mb-1 line-clamp-2 min-h-[2.6em]">{book.fields['书名']}</h3>
                  <div class="flex flex-row flex-wrap gap-2 mb-1">
                    {book.fields['推荐状态'] && (
                      <span class={`inline-block px-2 py-0.5 text-xs rounded-full border
                        ${book.fields['推荐状态'] === '推荐' ? 'bg-green-100 text-green-700 border-green-200' : ''}
                        ${book.fields['推荐状态'] === '中庸' ? 'bg-yellow-100 text-yellow-700 border-yellow-200' : ''}
                        ${book.fields['推荐状态'] === '不行' ? 'bg-red-100 text-red-700 border-red-200' : ''}
                        ${!['推荐','中庸','不行'].includes(book.fields['推荐状态']) ? 'bg-zinc-100 text-zinc-500 border-zinc-200 dark:bg-zinc-800 dark:border-zinc-700' : ''}
                      `}>{book.fields['推荐状态']}</span>
                    )}
                    {book.fields['完成阅读时期'] && (
                      <span class="inline-block px-2 py-0.5 text-xs text-zinc-400 bg-zinc-50 dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-full">{book.fields['完成阅读时期']}</span>
                    )}
                  </div>
                  {(book.fields['作者']?.length ?? 0) > 0 && (
                    <p class="text-xs text-zinc-600 dark:text-zinc-300 mb-1 line-clamp-1 min-h-[1.2em]">{book.fields['作者']?.join(', ')}</p>
                  )}
                  {book.fields['书评'] ? (
                    <p class="text-xs text-zinc-500 dark:text-zinc-400 line-clamp-2 min-h-[2.4em]">{book.fields['书评']}</p>
                  ) : (
                    <p class="text-xs text-zinc-400 line-clamp-2 min-h-[2.4em]">{book.fields['书籍简介']}</p>
                  )}
                </div>
                <div class="overlay absolute inset-0 bg-black/80 opacity-0 transition-opacity duration-300 rounded-xl invisible group-hover:visible group-hover:opacity-100 flex items-center justify-center overflow-hidden z-10">
                  <div class="p-4 text-white h-full overflow-y-auto custom-scrollbar w-full">
                    <h3 class="text-base font-bold mb-2 sticky top-0 bg-black/80 py-2">{book.fields['书名']}</h3>
                    {book.fields['书评'] ? (
                      <>
                        <p class="text-sm text-zinc-100 mb-3">{book.fields['书评']}</p>
                        {book.fields['书籍简介'] && (
                          <div class="pt-3 border-t border-white/20">
                            <p class="text-xs text-zinc-400">{book.fields['书籍简介']}</p>
                          </div>
                        )}
                      </>
                    ) : (
                      <p class="text-xs text-zinc-300">{book.fields['书籍简介']}</p>
                    )}
                  </div>
                </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- giscus评论 -->
  <div style="margin-top: 20px;"></div>

  <script is:inline>
    // 使用事件委托，更优雅且不会因为DOM变化而失效
    function setupCategoryToggle() {
      // 确保只绑定一次事件监听器
      if (document.categoryEventsInitialized) return;
      document.categoryEventsInitialized = true;

      // 点击事件委托
      document.addEventListener('click', (e) => {
        const header = e.target.closest('.category-card .category-header');
        if (!header) return;

        // 防止点击链接时触发折叠
        if (e.target.closest('a')) return;

        const card = header.closest('.category-card');
        if (!card) return;

        console.log('Category header clicked');

        // 检查当前状态
        const isAutoCollapsed = card.classList.contains('is-auto-collapsed');
        const isHoverExpanded = card.classList.contains('is-hover-expanded');
        const isManuallyCollapsed = card.classList.contains('is-manually-collapsed');

        console.log('Current state:', { isAutoCollapsed, isHoverExpanded, isManuallyCollapsed });

        if (isAutoCollapsed || isHoverExpanded) {
          // 从自动折叠/悬停展开状态变为手动折叠状态
          card.classList.remove('is-auto-collapsed', 'is-hover-expanded');
          card.classList.add('is-manually-collapsed');
        } else if (isManuallyCollapsed) {
          // 从手动折叠状态变为完全展开状态
          card.classList.remove('is-manually-collapsed');
        } else {
          // 从完全展开状态变为手动折叠状态
          card.classList.add('is-manually-collapsed');
        }

        // 折叠时禁用指针事件，防止误点击
        const content = card.querySelector('.category-content');
        if (card.classList.contains('is-manually-collapsed') && content) {
          content.style.pointerEvents = 'none';
          setTimeout(() => {
            content.style.pointerEvents = '';
          }, 400);
        }
      });

      // 悬停事件委托
      document.addEventListener('mouseenter', (e) => {
        const card = e.target.closest('.category-card');
        if (!card) return;

        if (card.classList.contains('is-auto-collapsed')) {
          card.classList.add('is-hover-expanded');
        }
      }, true);

      // 触摸事件委托（手机端）
      document.addEventListener('touchstart', (e) => {
        const card = e.target.closest('.category-card');
        if (!card) return;

        if (card.classList.contains('is-auto-collapsed')) {
          card.classList.add('is-hover-expanded');
        }
      }, { passive: true, capture: true });
    }

    // 页面加载时初始化
    document.addEventListener('astro:page-load', setupCategoryToggle);
    setupCategoryToggle();
  </script>

  <script src="https://giscus.app/client.js"
          data-repo="Lapis0x0/blog-discussion"
          data-repo-id="R_kgDONda6_g"
          data-category="Announcements"
          data-category-id="DIC_kwDONda6_s4ClN0D"
          data-mapping="pathname"
          data-strict="0"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="bottom"
          data-theme="preferred_color_scheme"
          data-lang="zh-CN"
          crossorigin="anonymous"
          async>
  </script>
</MainGridLayout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .group:hover .overlay {
    opacity: 1 !important;
    visibility: visible !important;
  }
  .book-cover-fallback {
    background: linear-gradient(135deg, var(--primary-light, #6366f1) 0%, var(--primary, #4f46e5) 100%);
    color: white;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    border-radius: 0.75rem 0.75rem 0 0;
    position: relative;
    overflow: hidden;
  }
  .book-cover-fallback::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 60%);
    opacity: 0.6;
  }
  .dark .book-cover-fallback {
    background: linear-gradient(135deg, var(--primary-dark, #4f46e5) 0%, var(--primary-darker, #3730a3) 100%);
  }

  /* 分类卡片折叠样式 */
  .category-card {
    position: relative;
  }

  .category-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, rgba(var(--primary-rgb), 0.1), transparent 60%);
    opacity: 0;
    transition: opacity 0.5s ease;
    z-index: -1;
    pointer-events: none;
  }

  .category-card:hover::before {
    opacity: 1;
  }

  .category-header:hover {
    background-color: rgba(var(--primary-rgb), 0.05);
  }

  /* 默认展开状态 */
  .category-content {
    max-height: 5000px; /* 设置一个足够大的值，确保能显示所有书籍 */
    opacity: 1;
    transition: max-height 0.4s ease-in-out, opacity 0.2s ease;
    overflow: visible; /* 允许内容正常显示 */
  }

  /* 自动折叠状态（默认） */
  .category-card.is-auto-collapsed .category-content {
    max-height: 0;
    opacity: 0;
    overflow: hidden; /* 折叠时隐藏溢出 */
  }

  /* 悬停展开状态 */
  .category-card.is-hover-expanded .category-content {
    max-height: 5000px; /* 设置一个足够大的值，确保能显示所有书籍 */
    opacity: 1;
    overflow: visible; /* 展开时允许内容正常显示 */
  }

  /* 手动折叠状态（优先级更高） */
  .category-card.is-manually-collapsed .category-content {
    max-height: 0;
    opacity: 0;
    overflow: hidden; /* 折叠时隐藏溢出 */
  }

  /* 完全展开状态（没有任何状态类时） */
  .category-card:not(.is-auto-collapsed):not(.is-hover-expanded):not(.is-manually-collapsed) .category-content {
    max-height: 5000px;
    opacity: 1;
    overflow: visible;
  }

  /* 手动折叠时悬停也不展开 */
  .category-card.is-manually-collapsed:hover .category-content {
    max-height: 0;
    opacity: 0;
  }

  /* 图标旋转 */
  .chevron-icon {
    transition: transform 0.3s ease;
  }

  /* 自动折叠状态的图标 */
  .category-card.is-auto-collapsed .chevron-icon {
    transform: rotate(-90deg);
  }

  /* 悬停展开状态的图标 */
  .category-card.is-hover-expanded .chevron-icon {
    transform: rotate(0deg);
  }

  /* 手动折叠状态的图标 */
  .category-card.is-manually-collapsed .chevron-icon {
    transform: rotate(-90deg);
  }
</style>
