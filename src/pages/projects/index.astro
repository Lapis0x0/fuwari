---
import MainGridLayout from '@/layouts/MainGridLayout.astro'
import { getEntry, getCollection } from 'astro:content'
import Markdown from '@components/misc/Markdown.astro'
import I18nKey from '@i18n/i18nKey'
import { i18n } from '@i18n/translation'
import { url } from '@utils/url-utils'
import { Icon } from 'astro-icon/components'
import type { Project, ProjectItem } from '@/types/config'
import type { CollectionEntry } from 'astro:content'

// 从Markdown文件中获取项目配置
let Content;
let projectsData: Project[] = [];
let allPosts: CollectionEntry<'posts'>[] = [];

try {
  const projectsPost = await getEntry('spec', 'projects');
  if (projectsPost) {
    const rendered = await projectsPost.render();
    Content = rendered.Content;
    projectsData = projectsPost.data.projects || [];
  }
  
  // 获取所有文章
  allPosts = await getCollection('posts', (post) => !post.data.draft);
} catch (error) {
  console.error('无法渲染项目内容:', error);
}

// 获取项目相关文章
const getProjectPosts = (item: ProjectItem) => {
  let posts: CollectionEntry<'posts'>[] = [];
  
  // 获取直接指定的文章（通过标题匹配）
  if (item.posts && item.posts.length > 0) {
    const relatedPosts = allPosts.filter(post => 
      item.posts?.some(postTitle => 
        post.data.title.includes(postTitle) || 
        postTitle.includes(post.data.title)
      )
    );
    posts = [...posts, ...relatedPosts];
  }
  
  // 获取分类文章
  if (item.categories && item.categories.length > 0) {
    const categoryPosts = allPosts.filter(post => 
      post.data.category && item.categories?.includes(post.data.category)
    ).filter(post => !posts.some(p => p.id === post.id));
    posts = [...posts, ...categoryPosts];
  }
  
  // 获取标签文章
  if (item.tags && item.tags.length > 0) {
    const tagPosts = allPosts.filter(post => 
      post.data.tags && post.data.tags.some((tag: string) => item.tags?.includes(tag))
    ).filter(post => !posts.some(p => p.id === post.id));
    posts = [...posts, ...tagPosts];
  }
  
  // 按照发布时间从老到新排序（较早发布的文章排在前面）
  posts.sort((a, b) => {
    const dateA = new Date(a.data.published).getTime();
    const dateB = new Date(b.data.published).getTime();
    return dateA - dateB; // 从老到新排序
  });
  
  return posts;
};

---

<MainGridLayout title={i18n(I18nKey.projects)} description={i18n(I18nKey.projects)}>
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
    <div class="card-base z-10 px-6 md:px-9 py-8 relative w-full">
      <!-- 页面标题 -->
      <div class="text-center mb-10">
        <h1 class="text-4xl font-bold mb-3 text-[var(--primary)]">{i18n(I18nKey.projects)}</h1>
        <div class="w-24 h-1 bg-[var(--primary)] mx-auto rounded-full opacity-70"></div>
        <p class="mt-4 text-50 max-w-2xl mx-auto">这里展示了我的各种项目集合，帮助你更好地浏览相关主题的文章。</p>
      </div>
      
      <!-- 项目列表 -->
      <div class="grid grid-cols-1 gap-x-6 gap-y-16 my-8">
        {projectsData.map((project) => (
          <div class="w-full">
            <div class="flex items-center gap-3 mb-6 border-l-4 border-[var(--primary)] pl-4">
              <h2 class="text-2xl font-bold text-neutral-900 dark:text-neutral-100">{project.title}</h2>
            </div>
            <p class="text-50 mb-6 text-lg text-neutral-900 dark:text-neutral-100">{project.description}</p>
            
            <!-- 项目卡片网格 -->
            <div class="grid grid-cols-1 gap-6">
              {project.items.map((item) => {
                const projectPosts = getProjectPosts(item);
                return (
                  <div class="group project-card relative flex flex-col h-full overflow-hidden rounded-lg border border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-950/50 shadow-sm transition-all duration-300 hover:border-[var(--primary)] hover:shadow-lg">
                    <div class="p-5 flex items-center justify-between cursor-pointer select-none">
                      <div class="flex items-center gap-4">
                        <Icon name="mdi:bookmark-outline" class="text-xl text-[var(--primary)]" />
                        <div>
                          <h3 class="text-lg font-bold text-neutral-900 dark:text-neutral-100">{item.title}</h3>
                          <p class="text-50 text-sm text-neutral-600 dark:text-neutral-400">{item.description}</p>
                        </div>
                      </div>
                      <div class="flex items-center gap-4">
                        <div class="flex items-center gap-1 text-sm text-neutral-500 dark:text-neutral-400">
                          <Icon name="mdi:file-document-outline" class="text-base" />
                          <span>{projectPosts.length} 篇文章</span>
                        </div>
                        {item.url && (
                          <a
                            href={item.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="project-link inline-flex items-center gap-1 text-[var(--primary)] hover:underline"
                          >
                            <Icon name="mdi:link-variant" class="text-base" />
                            <span>项目链接</span>
                          </a>
                        )}
                        <Icon name="mdi:chevron-down" class="chevron-icon text-lg transform transition-transform duration-300 group-hover:rotate-180" />
                      </div>
                    </div>
                    <div class="details-content overflow-y-auto max-h-0 opacity-0 group-hover:max-h-96 group-hover:opacity-100 transition-all duration-500 ease-in-out">
                      <div class="px-5 pb-5 pt-2">
                        {projectPosts.length > 0 ? (
                          <div class="grid grid-cols-1 gap-3 border-t border-zinc-200 dark:border-zinc-800 pt-4">
                            {projectPosts.map(post => (
                              <a href={`/posts/${post.slug}/`} class="block p-3 rounded-md hover:bg-zinc-100 dark:hover:bg-zinc-800/50 transition-colors">
                                <h4 class="font-medium text-neutral-800 dark:text-neutral-200">{post.data.title}</h4>
                                <div class="flex items-center gap-3 text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                                  <div class="flex items-center gap-1">
                                    <Icon name="mdi:calendar" class="text-xs" />
                                    <span>{new Date(post.data.published).toLocaleDateString('zh-CN')}</span>
                                  </div>
                                  {post.data.category && (
                                    <div class="flex items-center gap-1">
                                      <Icon name="mdi:folder-outline" class="text-xs" />
                                      <span>{post.data.category}</span>
                                    </div>
                                  )}
                                </div>
                              </a>
                            ))}
                          </div>
                        ) : (
                          <div class="text-center py-6 text-50 text-neutral-500 dark:text-neutral-400 border-t border-zinc-200 dark:border-zinc-800 pt-4">
                            <Icon name="mdi:file-alert-outline" class="text-3xl mx-auto mb-2 opacity-50" />
                            <p>暂无相关文章</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        ))}
      </div>
      
      <!-- Markdown 内容 -->
      {Content && (
        <div class="mt-12 pt-8 border-t border-zinc-200 dark:border-zinc-800">
          <Markdown class="prose dark:prose-invert max-w-none">
            <Content />
          </Markdown>
        </div>
      )}
    </div>
  </div>
</MainGridLayout>

<script is:inline>
  function setupProjectLinks() {
    const links = document.querySelectorAll('.project-link');
    links.forEach(link => {
      link.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    });
  }

  document.addEventListener('astro:page-load', setupProjectLinks);
  setupProjectLinks();

  function setupProjectCardToggle() {
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => {
        const header = card.querySelector('.p-5'); // The clickable header area
        const content = card.querySelector('.details-content');

        if (header && content) {
            header.addEventListener('click', (e) => {
                // 类型收窄，保证 e.target 存在且为 Element
                const target = e.target;
                if (target instanceof Element && target.closest('a')) {
                    return;
                }
                
                const isOpening = !card.classList.contains('is-open');
                card.classList.toggle('is-open');

                if (isOpening) {
                  // 只有 HTMLElement 才有 style
                  if (content instanceof HTMLElement) {
                    content.style.pointerEvents = 'none';
                    setTimeout(() => {
                        content.style.pointerEvents = '';
                    }, 300); // A delay to absorb the ghost click
                  }
                }
            });
        }
    });
  }
  document.addEventListener('astro:page-load', setupProjectCardToggle);
  setupProjectCardToggle();
</script>

<style>
  .project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, rgba(var(--primary-rgb), 0.1), transparent 60%);
    opacity: 0;
    transition: opacity 0.5s ease;
    z-index: -1;
    pointer-events: none;
  }

  .project-card:hover::before {
    opacity: 1;
  }

  /* Custom scrollbar for details content */
  .details-content::-webkit-scrollbar {
    width: 6px;
  }
  .details-content::-webkit-scrollbar-track {
    background: transparent;
  }
  .details-content::-webkit-scrollbar-thumb {
    background-color: var(--tw-prose-hr);
    border-radius: 3px;
  }
  .details-content::-webkit-scrollbar-thumb:hover {
    background-color: var(--primary);
  }
  .details-content {
    scrollbar-width: thin;
    scrollbar-color: var(--tw-prose-hr) transparent;
  }

  .project-card.is-open .details-content {
    max-height: 24rem; /* 96 in tailwind units */
    opacity: 1;
  }

  .project-card.is-open .chevron-icon {
    transform: rotate(180deg);
  }
</style>
